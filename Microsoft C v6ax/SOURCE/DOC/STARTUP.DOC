C Runtime Library Startup Sources
---------------------------------

The directory \startup and its subdirectories contain the files
necessary for building the startup portion of the C runtime library.
The \startup directory contains the startup source files, the include
files, the batch file, and the make file used to build the startup object
files.	The subdirectories of \startup contain OS specific sources.

The startup object files can be built by invoking startup.bat (DOS) or
startup.cmd (OS/2) from within the \startup directory.	This batch file
assumes the following:

	(1) nmake.exe, nmk.com, link.exe, the C compiler, and the assembler
	must be in the execution path.	MASM 5.0 and C 6.0 or later are
	required to build the startup sources.

	(2) For OS/2, os2.lib must be in the directory specified by the LIB
	environment variable.

	(3) environment variable INCLUDE must be set to the directory that
	contains your C include files

Startup will create four memory model specific subdirectories (i.e., S, M, C,
and L) and place the appropriate object files there.  Under each memory model
subdirectory, startup creates two addition subdirectories OS2 and DOS where
OS specific objects reside.

The include files stdio.h and ctype.h are required for building the
startup source file wild.c but are not included on the \startup directory
because they exist on the directory containing the standard include files.
A make variable called CINC controls where the makefile looks for these
include files. STARTUP sets CINC to the current value of the INCLUDE
environment variable.  This variable should be set to the location of
the C include files.  CINC can also be set in the makefile if you wish
to run the makefile separately.

The message "<cEnd - nogen>" is generated when some of the assembly language 
source files are assembled.  This message is expected and is totally benign.

The startup batch file requires as arguments a list of capital letters
describing the memory models you wish to build.  For example,
"startup S L" will build the small and large model startup objects.
Startup will then link the objects with a sample C program called nulbody.c
(consisting of a null main functions) to produce nulbody.exe.
[Invoking startup.<bat,cmd> with no arguments will give usage information.]

If you wish to build startup sources for only one operating system
(i.e. DOS or OS/2), type "DOS" or "OS2" as the first argument to the
startup batch file.

Note:  startup sources written in assembly language have been edited with
tab stops set to 8.  Startup sources written in C have been edited with
tab stops set to 4.

The following files are contained in the \startup directory:

Startup source files (OS independent):
	rchkstk.asm
	fmsghdr.asm
	chkstk.asm
	chksum.asm
	crt0fp.asm
	setargv.asm
	wild.c

Startup source files (OS specific):
	crt0.asm
	crt0dat.asm
	crt0msg.asm
	execmsg.asm  (DOS only)
	nmsghdr.asm
	stdalloc.asm
	stdenvp.asm
	stdargv.asm

Startup include files:
	cmacros.inc
	heap.inc
	msdos.inc
	msdos.h
	register.h
	rterr.inc
	version.inc

File count files:
	_file.c
	file2.h
	
Make and batch files:
	startup.bat:	builds objs and links null program on DOS
	startup.cmd:	builds objs and links null program on OS/2
	makefile:	contains rules for building startup sources
	nulbody.c:	null c program
	nulbody.lnk:	link script for linking null program

Documentation:
	readme.doc:	information about \startup directory structure
			and contents



Placing the Stack outside of DGROUP
-----------------------------------

    If your program requires a large amount of stack space, the run time
library can be configured to place the stack in a seperate segment
outside of DGROUP.  By doing this, the stack can be up to 64K in size
without reducing the amount of storage available in DGROUP for near
data.  In order to do this your program must be either compact, large,
or huge model.	You must also direct the compiler to assume that
that SS != DS.	Thus, your memory model specification should be -ACw,
-ALw, or -AHw.	See the compiler documentation for more information
about these options.

    To use a far stack, you must assemble the startup sources provided
with C 6.0.  In the startup sources directory is a file called "makefile"
which controls the startup module build process for the run time library.
To enable a far stack, you need to edit the makefile.  Near the top of
the file are two lines which begin "CFLAGS=" and "ASMFLAGS=".  You should
add the text " -DFARSTACK" to the end of these two lines.  Then build
the startup modules according to instructions given previously in this
file.  You should then use the LIB utility to replace the startup modules
in your library with the new modules you have built.  When linking, the
size of the stack can be controlled with the /STACK command line option.

    If you are creating DOS programs, the size of your .EXE file will be
increased by the size of your stack.  This is a consequence of the DOS
.EXE format.  To reduce the size of your .EXE file, link with the
/EXEPACK option.

				--- End ---
