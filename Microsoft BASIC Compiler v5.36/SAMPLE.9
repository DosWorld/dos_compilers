==
0,0,23,79,0,,C
=,7,0,14,0,0,0,0
10,10,20,69,500,,
!  ==================================================
!  Here are some of the benefits of using BetterBASIC
!  ==================================================
%
0,0,23,79,0,,C
=,7,1,15,12,0,11,0
2,5,21,74,0,WHY BetterBASIC ?,F

!			   PRODUCTIVITY

The  ultimate purpose of any programming language is productivity.
Languages  like  PASCAL  and  MODULA  2  are  considered   to   be
productive, old-fashioned BASIC is not.  

BetterBASIC incorporates all those features of PASCAL and MODULA 2
which make those languages productive. The most important are:

!		    Structure and Modularity.

The  structure  and  modularity of BetterBASIC allows you to break
any programming problem into small, easy to manage pieces,  rather
than  the  huge  tangle  of "spaghetti-code" you have to face with
ordinary BASIC.
%
0,0,0,0,0,,N

!			   RELIABILITY

Reliability  is  obviously just as important as productivity.  How
does BetterBASIC help you create reliable code?

The  biggest  problem  with  ordinary  BASIC  lies  in  its global
structure.  Everything is accessible from  everywhere  else.   The
most  frequent  bugs  encountered  by BASIC programmers are due to
so-called side effects, whereby a datum is  inadvertently  altered
or  destroyed by a subroutine which was not supposed to have access
to that datum.

BetterBASIC   provides   Procedures   and   Functions  with  local
variables, which prevent a Procedure or  Function  from  accessing
any datum inadvertantly.
%
0,0,0,0,0,,N

!			   MANAGABILITY

Ask any software manager about managing a software project written
in  any  conventional  BASIC  which  involves  a  team  of several
programmers.  It's a horror show!!

BetterBASIC  supports  not only Procedures and Functions, but also
separately created Modules.   Procedures,  Functions  and  Modules
allow  proper  specification  of software sub-system functions, in
such a way that a large project can be cleanly  divided  up  among
several programmers.

Once  tested  and  debugged,  a  BetterBASIC  Module  will work as
intended no matter what the application  is.   There  will  be  no
unexpected side-effects.
%
0,0,0,0,100,,N

!			   REUSABILITY

Ordinary  BASIC  code  is  in  general  not  reusable.   Identical
algorithms land  up  being  coded  over  and  over  for  each  new
application.

BetterBASIC  code  is reusable.  The ability to reuse program code
from application to application results in:

%
=,7,1,15,11,0,14,0
14,12,20,66,0,Increased Productivity,F

!       No need to recreate work already done.
%
=,7,1,15,11,0,14,0
14,12,20,66,0,Increased Reliability,F

!	    No new bugs will be created.
%
=,7,1,15,11,0,14,0
14,12,20,66,0,Reduced Maintenance Costs,F

!      Only one piece of code to maintain for 
!	    many different applications.
#
